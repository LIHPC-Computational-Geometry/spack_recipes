diff -ru occt-V7_1_0_a/src/Standard/Standard_CLocaleSentry.cxx occt-V7_1_0_b/src/Standard/Standard_CLocaleSentry.cxx
--- occt-V7_1_0_a/src/Standard/Standard_CLocaleSentry.cxx	2016-11-25 11:50:18.000000000 +0100
+++ occt-V7_1_0_b/src/Standard/Standard_CLocaleSentry.cxx	2020-06-22 17:12:50.575830317 +0200
@@ -30,7 +30,7 @@
   public:
 
     CLocalePtr()
-    #ifdef HAVE_XLOCALE_H
+    #ifdef OCCT_CLOCALE_POSIX2008
     : myLocale (newlocale (LC_ALL_MASK, "C", NULL))
     #elif defined(_WIN32) && !defined(__MINGW32__)
     : myLocale (_create_locale (LC_ALL, "C"))
@@ -41,7 +41,7 @@
 
     ~CLocalePtr()
     {
-    #ifdef HAVE_XLOCALE_H
+    #ifdef OCCT_CLOCALE_POSIX2008
       freelocale (myLocale);
     #elif defined(_WIN32) && !defined(__MINGW32__)
       _free_locale (myLocale);
@@ -72,7 +72,7 @@
 // purpose  :
 // =======================================================================
 Standard_CLocaleSentry::Standard_CLocaleSentry()
-#ifdef HAVE_XLOCALE_H
+#ifdef OCCT_CLOCALE_POSIX2008
 : myPrevLocale (uselocale (theCLocale.myLocale)) // switch to C locale within this thread only using xlocale API
 #else
 : myPrevLocale (setlocale (LC_ALL, 0))
@@ -81,7 +81,7 @@
 #endif
 #endif
 {
-#if !defined(HAVE_XLOCALE_H)
+#if !defined(OCCT_CLOCALE_POSIX2008)
   const char* aPrevLocale = (const char* )myPrevLocale;
   if (myPrevLocale == NULL
    || (aPrevLocale[0] == 'C' && aPrevLocale[1] == '\0'))
@@ -104,7 +104,7 @@
 // =======================================================================
 Standard_CLocaleSentry::~Standard_CLocaleSentry()
 {
-#if defined(HAVE_XLOCALE_H)
+#if defined(OCCT_CLOCALE_POSIX2008)
   uselocale ((locale_t )myPrevLocale);
 #else
   if (myPrevLocale != NULL)
diff -ru occt-V7_1_0_a/src/Standard/Standard_CLocaleSentry.hxx occt-V7_1_0_b/src/Standard/Standard_CLocaleSentry.hxx
--- occt-V7_1_0_a/src/Standard/Standard_CLocaleSentry.hxx	2016-11-25 11:50:18.000000000 +0100
+++ occt-V7_1_0_b/src/Standard/Standard_CLocaleSentry.hxx	2020-06-22 17:14:23.760706713 +0200
@@ -20,23 +20,25 @@
 
 #include <locale.h>
 
-#ifndef HAVE_XLOCALE_H
-  //! "xlocale.h" available in Mac OS X and glibc (Linux) for a long time as an extension
-  //! and become part of POSIX since '2008.
-  //! Notice that this is impossible to test (_POSIX_C_SOURCE >= 200809L)
-  //! since POSIX didn't declared such identifier.
+#if defined(__APPLE__)
+  #include <xlocale.h>
+#endif
+
+#ifndef OCCT_CLOCALE_POSIX2008
+  //! @def OCCT_CLOCALE_POSIX2008
+  //!
+  //! POSIX.1-2008 extends C locale API by providing methods like newlocale/freelocale/uselocale.
+  //! Presence of this extension cannot be checked in straightforward way (like (_POSIX_C_SOURCE >= 200809L))
+  //! due to missing such declarations in standard.
+  //! On macOS new functions are declared within "xlocale.h" header (the same is for glibc, but this header has been removed since glibc 2.26).
   #if defined(__APPLE__)
-    #define HAVE_XLOCALE_H
+    #define OCCT_CLOCALE_POSIX2008
   #endif
 
   //! We check _GNU_SOURCE for glibc extensions here and it is always defined by g++ compiler.
   #if defined(_GNU_SOURCE) && !defined(__ANDROID__)
-    #define HAVE_XLOCALE_H
+    #define OCCT_CLOCALE_POSIX2008
   #endif
-#endif // ifndef HAVE_LOCALE_H
-
-#ifdef HAVE_XLOCALE_H
-  #include <xlocale.h>
 #endif
 
 #if !defined(__ANDROID__)
@@ -63,7 +65,7 @@
 
 public:
 
-#ifdef HAVE_XLOCALE_H
+#ifdef OCCT_CLOCALE_POSIX2008
   typedef  locale_t clocale_t;
 #elif defined(_WIN32) && !defined(__MINGW32__)
   typedef _locale_t clocale_t;
diff -ru occt-V7_1_0_a/src/Standard/Standard_CString.cxx occt-V7_1_0_b/src/Standard/Standard_CString.cxx
--- occt-V7_1_0_a/src/Standard/Standard_CString.cxx	2016-11-25 11:50:18.000000000 +0100
+++ occt-V7_1_0_b/src/Standard/Standard_CString.cxx	2020-06-22 17:16:03.821649263 +0200
@@ -76,7 +76,7 @@
   // and newlocale/uselocale/freelocale to switch locale within current thread only.
   // So we switch to C locale temporarily
   #define SAVE_TL() Standard_CLocaleSentry aLocaleSentry;
-  #ifndef HAVE_XLOCALE_H
+  #ifndef OCCT_CLOCALE_POSIX2008
     // glibc version for android platform use locale-independent implementation of
     // strtod, strtol, strtoll functions. For other system with locale-depended
     // implementations problems may appear if "C" locale is not set explicitly.
