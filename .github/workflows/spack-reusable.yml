name: Reusable Spack CI

on:
  workflow_call:

env:
  QT_QPA_PLATFORM: offscreen

jobs:
  main:
    name: Main job
    # The CMake configure and build commands are platform agnostic
    # and should work equally well on Linux, Windows or Mac.
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/lihpc-computational-geometry/spack-cgcore:latest

    steps:
      # Initialize Spack environment (Spack and recipes are in the container)
      - name: Initialize environment
        shell: bash
        run : |
          source /spack/share/spack/setup-env.sh
          cd /spack_recipes && git pull
          spack repo add /spack_recipes/meshing
          spack repo add /spack_recipes/meshing_supersede

      # Checkout project source files
      - name: Checkout sources
        uses: actions/checkout@v3

      # Build the current sources, run unit tests and install
      - name: Build and install
        shell: bash
        run: |
          source /spack/share/spack/setup-env.sh
          spack env create ci-env
          spack env activate ci-env
          # ${{ github.event.repository.name }} represents the name of the project
          spack add ${{ github.event.repository.name }}
          spack add python@3
          spack add py-pytest
          # Must set a version number > last version to take right variants in recipes
          spack develop -p $GITHUB_WORKSPACE --no-clone ${{ github.event.repository.name }}@999
          spack concretize --reuse
          spack install -v --test=root

      # Build and run the test_link directory to check install
      - name: Build and run test_link
        shell: bash
        run: |
          source /spack/share/spack/setup-env.sh
          # load the environment
          spack env activate ci-env
          spack load python
          spack load py-pytest
          spack load ${{ github.event.repository.name }}@999

          # trace for logs
          python --version
          command -v python
          pytest --version
          command -v pytest
          echo $PYTHONPATH

          # set PYTHONPATH variable
          export PACKAGE_PATH=$PACKAGE_PATH/lib/python3.10/site-packages
          export PYTHONPATH=$PYTHONPATH:$PACKAGE_PATH
          echo $PYTHONPATH

          # build test_link and run tests
          cd test_link/
          cmake -S . -B build
          cmake --build build
          cmake --build build --target test

      - name: Archive test_link logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-of-link-logs
          path: ${{ github.workspace }}/test_link/build/Testing/Temporary/LastTest.log
